Single sampling auto

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotor;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaRoverRuckus;
import org.firstinspires.ftc.robotcore.external.hardware.camera.Camera;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import java.util.Objects;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import java.util.List;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaRoverRuckus;
import org.firstinspires.ftc.robotcore.external.tfod.TfodRoverRuckus;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;

@Autonomous(name = "VUTFtest", group = "")
public class VUTFtest extends LinearOpMode {

  private VuforiaRoverRuckus vuforiaRoverRuckus;
  private TfodRoverRuckus tfodRoverRuckus;
  private static final String VUFORIA_KEY = "ARV7tjD/////AAABmRXyIwx5YEGTve7Xh31ZCA1aGt8Mx+Nfe9yGUGWLxMaBji0X5F2YH3crYMTK976I0SGBZnc/tG/wQm/WjVTdHYemp7z7hZRSf2EVGlJE+IibNmLITcrzM1wm0yArSsVGutIJC0lmJiLC8A/lavmbqIiOXxOAkJN/wvxdtY4x4OC6PO8Jh8XVg2OSV/28Z3snfswbwsB1cJdNbMbq1Y2/u/Lzjb1r7EIWjD3AtsUrtSe3wxnGfbw72Lw3/RnsF5NTN2W2uI3TAxiaW+IF5noeVtS02AdHlPDMIPnUVz1QSUlZfHFMuoq9B4u3c23CpnKaBYBb85xauK9bQnMJl+3EOLmDlwFPGdP3F+0jPmOhBd9G";
    private DcMotor leftDrive      = null;
    private DcMotor rightDrive     = null;
    private DcMotor leftDriveback  = null;
    private DcMotor rightDriveback = null;
    private                 Servo   yes             = null;
    private                 Servo   Yes             = null;
     private DcMotor armMotor = null;
  static final int        Tickcount               = 1120;
static final double     WHEEL_DIAMETER_INCHES   = 4.0 ;     // For figuring circumference
static final double     COUNTS_PER_INCH         = (WHEEL_DIAMETER_INCHES * 3.1415)/(Tickcount);
static final int        Distance                = 57;
static final int        STRAFE                  = 15;
static final int        Distance1                = 47;
static final int        STRAFE1                  = 25;
static final int        STRAFE2                  = 6;

static final int        EncoderTarget           = (int) Math.round (Distance/ COUNTS_PER_INCH);
  static final int        EncoderTarget1           = (int) Math.round (STRAFE/ COUNTS_PER_INCH);  
  static final int        offhook          = (int) Math.round (STRAFE2/ COUNTS_PER_INCH);  
  /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */
  @Override
  public void runOpMode() {
      leftDrive      = hardwareMap.get(DcMotor.class, "leftDrive");
        rightDrive     = hardwareMap.get(DcMotor.class, "rightDrive");
        leftDriveback  = hardwareMap.get(DcMotor.class, "leftDriveback");
        rightDriveback = hardwareMap.get(DcMotor.class, "rightDriveback");
         yes            = hardwareMap.get(Servo.class,   "yes");
             Yes            = hardwareMap.get(Servo.class,   "Yes");
          armMotor= hardwareMap.get(DcMotor.class,"armMotor");
    List<Recognition> recognitions;
    double goldMineralX;
    double silverMineral1X;
    double silverMineral2X;
      leftDrive.setDirection(DcMotor.Direction.FORWARD);
        rightDrive.setDirection(DcMotor.Direction.REVERSE);
        leftDriveback.setDirection(DcMotor.Direction.FORWARD);
        rightDriveback.setDirection(DcMotor.Direction.REVERSE);
        armMotor.setDirection(DcMotor.Direction.REVERSE);
    VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();
    parameters.cameraDirection = CameraDirection.BACK;
    parameters.vuforiaLicenseKey = VUFORIA_KEY;

    vuforiaRoverRuckus = new VuforiaRoverRuckus();
    tfodRoverRuckus = new TfodRoverRuckus();

    // Put initialization blocks here.
    //vuforiaRoverRuckus.initialize("", hardwareMap.get(WebcamName.class, "Webcam 1"), "", true, false, VuforiaLocalizer.Parameters.CameraMonitorFeedback.AXES, 0, 0, 0, 0, 0, 0, true);
    vuforiaRoverRuckus.initialize(VUFORIA_KEY, CameraDirection.BACK, true, false, VuforiaLocalizer.Parameters.CameraMonitorFeedback.AXES, 0, 0, 0, 0, 0, 0, true);
    tfodRoverRuckus.initialize(vuforiaRoverRuckus, 0.4f, true, true);
      yes.setPosition(1);
      Yes.setPosition(.55);
    telemetry.addData(">", "Press Play to start");
    telemetry.update();
    waitForStart();
   
    if (opModeIsActive()) {  
      
      leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          
         leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
         armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
        
          
      tfodRoverRuckus.activate();
      // Put run blocks here.
      while (opModeIsActive()) {
        // Put loop blocks here.
        recognitions = tfodRoverRuckus.getRecognitions();
        telemetry.addData("# Objects Recognized", recognitions.size());
        if (recognitions.size() > 0) {
          goldMineralX = -1;
          silverMineral1X = -1;
          silverMineral2X = -1;
          // TODO: Enter the type for variable named recognition
          for (Recognition recognition : recognitions) {
            if (recognition.getLabel().equals("Gold Mineral")) {
              goldMineralX = recognition.getLeft();
            } else if (silverMineral1X == -1) {
              silverMineral1X = recognition.getLeft();
            } else {
              silverMineral2X = recognition.getLeft();
            }
          }
          
    
          telemetry.addData("goldMineralX:    ", goldMineralX);
          telemetry.addData("silverMineral1X: ", silverMineral1X);
          telemetry.addData("silverMineral2X: ", silverMineral2X);
          if (goldMineralX >= 30 && goldMineralX <= 600)
          {
           armMotor.setTargetPosition(armMotor.getCurrentPosition()-12450);
            
            
            armMotor.setPower(1);
             while (  armMotor.isBusy())
        {
            telemetry.addData("path","gold");
            telemetry.update();
            idle();
        }
       armMotor.setPower(0);
           armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
     
        leftDrive.setTargetPosition(-EncoderTarget1/2);
          rightDrive.setTargetPosition(EncoderTarget1/2);
          rightDriveback.setTargetPosition(EncoderTarget1/2);
          leftDriveback.setTargetPosition(-EncoderTarget1/2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         
        
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
       
   
       leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      leftDrive.setTargetPosition( offhook );
          rightDrive.setTargetPosition( offhook );
          rightDriveback.setTargetPosition( offhook );
          leftDriveback.setTargetPosition( offhook );
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         
        
        while ( rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1/2);
          rightDrive.setTargetPosition(-EncoderTarget1/2);
          rightDriveback.setTargetPosition(-EncoderTarget1/2);
          leftDriveback.setTargetPosition(EncoderTarget1/2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         //above is to get off the hook and postiion, is generic for all three states
         while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(-EncoderTarget1/4);
          rightDrive.setTargetPosition(-EncoderTarget1/4);
          rightDriveback.setTargetPosition(-EncoderTarget1/4);
          leftDriveback.setTargetPosition(-EncoderTarget1/4);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         
        
       
       
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(-EncoderTarget1);
          rightDriveback.setTargetPosition(EncoderTarget1);
          leftDriveback.setTargetPosition(-EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(offhook+offhook/2+offhook/3);
          rightDrive.setTargetPosition(offhook+offhook/2+offhook/3);
          rightDriveback.setTargetPosition(offhook+offhook/2+offhook/3);
          leftDriveback.setTargetPosition(offhook+offhook/2+offhook/3);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(-EncoderTarget1);
          rightDriveback.setTargetPosition(EncoderTarget1);
          leftDriveback.setTargetPosition(-EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         
        
        
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        Yes.setPosition(-1);
        sleep(500);
        Yes.setPosition(.55);
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(offhook);
          rightDrive.setTargetPosition(offhook);
          rightDriveback.setTargetPosition(offhook);
          leftDriveback.setTargetPosition(offhook
          );
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         
        
        
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(-EncoderTarget1);
          rightDriveback.setTargetPosition(EncoderTarget1);
          leftDriveback.setTargetPosition(-EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         
        
        
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      
        leftDrive.setTargetPosition(EncoderTarget1/2);
          rightDrive.setTargetPosition(-EncoderTarget1/2);
          rightDriveback.setTargetPosition(-EncoderTarget1/2);
          leftDriveback.setTargetPosition(EncoderTarget1/2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
         while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(-EncoderTarget1/2);
          rightDrive.setTargetPosition(-EncoderTarget1/2);
          rightDriveback.setTargetPosition(-EncoderTarget1/2);
          leftDriveback.setTargetPosition(-EncoderTarget1/2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
     leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(-EncoderTarget1);
          rightDriveback.setTargetPosition(EncoderTarget1);
          leftDriveback.setTargetPosition(-EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
     
         yes.setPosition (.5);
         sleep(500);
         yes.setPosition (1);
          leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(-EncoderTarget1);
          rightDriveback.setTargetPosition(EncoderTarget1);
          leftDriveback.setTargetPosition(-EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(-EncoderTarget1);
          rightDriveback.setTargetPosition(-EncoderTarget1);
          leftDriveback.setTargetPosition(EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1+offhook/2);
          rightDrive.setTargetPosition(-EncoderTarget1-offhook/2);
          rightDriveback.setTargetPosition(EncoderTarget1+offhook/2);
          leftDriveback.setTargetPosition(-EncoderTarget1-offhook/2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1*4);
          rightDrive.setTargetPosition(EncoderTarget1*4);
          rightDriveback.setTargetPosition(EncoderTarget1*4);
          leftDriveback.setTargetPosition(EncoderTarget1*4);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(-offhook);
          rightDrive.setTargetPosition(offhook);
          rightDriveback.setTargetPosition(-offhook);
          leftDriveback.setTargetPosition(offhook);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1+offhook);
          rightDrive.setTargetPosition(-EncoderTarget1-offhook);
          rightDriveback.setTargetPosition(-EncoderTarget1-offhook);
          leftDriveback.setTargetPosition(EncoderTarget1+offhook);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(offhook*2);
          rightDrive.setTargetPosition(-offhook*2);
          rightDriveback.setTargetPosition(offhook*2);
          leftDriveback.setTargetPosition(-offhook*2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         
         
         
         yes.setPosition(.5);
         
       leftDrive.setPower(0);
        rightDrive.setPower(0);
        leftDriveback.setPower(0);
        rightDriveback.setPower(0);
        
          }
          if (goldMineralX >= 850 && goldMineralX <= 2000)
          {
            telemetry.addData("path","the right");
            telemetry.update();
             armMotor.setTargetPosition(armMotor.getCurrentPosition()-12450);
            
            
            armMotor.setPower(1);
             while (  armMotor.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
       armMotor.setPower(0);
           armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      
        leftDrive.setTargetPosition(-EncoderTarget1/2);
          rightDrive.setTargetPosition(EncoderTarget1/2);
          rightDriveback.setTargetPosition(EncoderTarget1/2);
          leftDriveback.setTargetPosition(-EncoderTarget1/2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         
        
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
       
      
       leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      leftDrive.setTargetPosition( offhook );
          rightDrive.setTargetPosition( offhook );
          rightDriveback.setTargetPosition( offhook );
          leftDriveback.setTargetPosition( offhook );
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         
        
        while ( rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1/2);
          rightDrive.setTargetPosition(-EncoderTarget1/2);
          rightDriveback.setTargetPosition(-EncoderTarget1/2);
          leftDriveback.setTargetPosition(EncoderTarget1/2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(-EncoderTarget1);
          rightDrive.setTargetPosition(-EncoderTarget1);
          rightDriveback.setTargetPosition(-EncoderTarget1);
          leftDriveback.setTargetPosition(-EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1*2);
          rightDrive.setTargetPosition(-EncoderTarget1*2);
          rightDriveback.setTargetPosition(EncoderTarget1*2);
          leftDriveback.setTargetPosition(-EncoderTarget1*2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
       
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(-offhook);
          rightDrive.setTargetPosition(-offhook);
          rightDriveback.setTargetPosition(-offhook);
          leftDriveback.setTargetPosition(-offhook);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         Yes.setPosition(-1);
        
        sleep(500);
        Yes.setPosition(.55);
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(-EncoderTarget1);
          rightDriveback.setTargetPosition(-EncoderTarget1);
          leftDriveback.setTargetPosition(EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         
        
        
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
       
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(-offhook);
          rightDrive.setTargetPosition(offhook);
          rightDriveback.setTargetPosition(offhook);
          leftDriveback.setTargetPosition(-offhook);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
     while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
          leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1*2);
          rightDrive.setTargetPosition(-EncoderTarget1*2);
          rightDriveback.setTargetPosition(EncoderTarget1*2);
          leftDriveback.setTargetPosition(-EncoderTarget1*2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
     while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(offhook);
          rightDrive.setTargetPosition(-offhook);
          rightDriveback.setTargetPosition(-offhook);
          leftDriveback.setTargetPosition(offhook);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
     while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(-EncoderTarget1);
          rightDriveback.setTargetPosition(EncoderTarget1);
          leftDriveback.setTargetPosition(-EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
     while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        yes.setPosition(.5);
        sleep(500);
         yes.setPosition(1);
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(-EncoderTarget1);
          rightDriveback.setTargetPosition(EncoderTarget1);
          leftDriveback.setTargetPosition(-EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
     while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(EncoderTarget1);
          rightDriveback.setTargetPosition(EncoderTarget1);
          leftDriveback.setTargetPosition(EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
     while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1*3);
          rightDrive.setTargetPosition(EncoderTarget1*3);
          rightDriveback.setTargetPosition(EncoderTarget1*3);
          leftDriveback.setTargetPosition(EncoderTarget1*3);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
     while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1+offhook);
          rightDrive.setTargetPosition(-EncoderTarget1-offhook);
          rightDriveback.setTargetPosition(-EncoderTarget1-offhook);
          leftDriveback.setTargetPosition(EncoderTarget1+offhook);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
     while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1*2);
          rightDrive.setTargetPosition(-EncoderTarget1*2);
          rightDriveback.setTargetPosition(EncoderTarget1*2);
          leftDriveback.setTargetPosition(-EncoderTarget1*2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
     while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        yes.setPosition(.5);
  
        leftDrive.setPower(0);
         rightDrive.setPower(0);
         leftDriveback.setPower(0);
         rightDriveback.setPower(0);
        
          }
            if (goldMineralX == -1)
          {
           
             armMotor.setTargetPosition(armMotor.getCurrentPosition()-12450);
            
            
            armMotor.setPower(1);
             while (  armMotor.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
       armMotor.setPower(0);
           armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
     
        leftDrive.setTargetPosition(-EncoderTarget1/2);
          rightDrive.setTargetPosition(EncoderTarget1/2);
          rightDriveback.setTargetPosition(EncoderTarget1/2);
          leftDriveback.setTargetPosition(-EncoderTarget1/2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         
        
        while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
       
      
       leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      leftDrive.setTargetPosition( offhook );
          rightDrive.setTargetPosition( offhook );
          rightDriveback.setTargetPosition( offhook );
          leftDriveback.setTargetPosition( offhook );
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
    
         
        
        while ( rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1/2);
          rightDrive.setTargetPosition(-EncoderTarget1/2);
          rightDriveback.setTargetPosition(-EncoderTarget1/2);
          leftDriveback.setTargetPosition(EncoderTarget1/2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setPower(0);
         rightDrive.setPower(0);
         leftDriveback.setPower(0);
         rightDriveback.setPower(0);
          leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition((offhook*2 - (offhook/2))- (offhook/6));
          rightDrive.setTargetPosition((offhook*2 - (offhook/2))- (offhook/6));
          rightDriveback.setTargetPosition((offhook*2 - (offhook/2))- (offhook/6));
          leftDriveback.setTargetPosition((offhook*2 - (offhook/2))- (offhook/6));
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(offhook*3);
          rightDrive.setTargetPosition(-offhook*3);
          rightDriveback.setTargetPosition(offhook*3);
          leftDriveback.setTargetPosition(-offhook*3);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(EncoderTarget1);
          rightDriveback.setTargetPosition(EncoderTarget1);
          leftDriveback.setTargetPosition(EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(-EncoderTarget1);
          rightDriveback.setTargetPosition(EncoderTarget1);
          leftDriveback.setTargetPosition(-EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        Yes.setPosition(-1);
        
        sleep(500);
        Yes.setPosition(.55);
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(-offhook);
          rightDrive.setTargetPosition(offhook);
          rightDriveback.setTargetPosition(offhook);
          leftDriveback.setTargetPosition(-offhook);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1);
          rightDrive.setTargetPosition(EncoderTarget1);
          rightDriveback.setTargetPosition(EncoderTarget1);
          leftDriveback.setTargetPosition(EncoderTarget1);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1*2);
          rightDrive.setTargetPosition(-EncoderTarget1*2);
          rightDriveback.setTargetPosition(EncoderTarget1*2);
          leftDriveback.setTargetPosition(-EncoderTarget1*2);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(offhook);
          rightDrive.setTargetPosition(-offhook);
          rightDriveback.setTargetPosition(-offhook);
          leftDriveback.setTargetPosition(offhook);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1- (offhook));
          rightDrive.setTargetPosition(EncoderTarget1- (offhook));
          rightDriveback.setTargetPosition(EncoderTarget1- (offhook));
          leftDriveback.setTargetPosition(EncoderTarget1- (offhook));
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        
          yes.setPosition(.5);
        sleep(500);
        yes.setPosition(1);
         leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1*2 +(offhook+offhook/2));
          rightDrive.setTargetPosition(-EncoderTarget1*2-(offhook+offhook/2));
          rightDriveback.setTargetPosition(-EncoderTarget1*2-(offhook+offhook/2));
          leftDriveback.setTargetPosition(EncoderTarget1*2+(offhook+offhook/2));
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          rightDriveback.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION); 
         rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         rightDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         leftDriveback.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftDrive.setTargetPosition(EncoderTarget1*5);
          rightDrive.setTargetPosition(-EncoderTarget1*5);
          rightDriveback.setTargetPosition(EncoderTarget1*5);
          leftDriveback.setTargetPosition(-EncoderTarget1*5);
      
         leftDrive.setPower(1);
         rightDrive.setPower(1);
         leftDriveback.setPower(1);
         rightDriveback.setPower(1);
          while (rightDriveback.isBusy())
        {
            telemetry.addData("path","im busy fam");
            telemetry.update();
            idle();
        }
        yes.setPosition(.5);
        
          leftDrive.setPower(0);
         rightDrive.setPower(0);
         leftDriveback.setPower(0);
         rightDriveback.setPower(0);
          }
          // Make sure we found one gold mineral and two silver minerals.
          /*if (goldMineralX != -1 && silverMineral1X != -1 && silverMineral2X != -1) {
            if (goldMineralX < silverMineral1X && goldMineralX < silverMineral2X) {
              telemetry.addData("Gold Mineral Position", "Left");
            } else if (goldMineralX > silverMineral1X && goldMineralX > silverMineral2X) {
              telemetry.addData("Gold Mineral Position", "Right");
            } else {
              telemetry.addData("Gold Mineral Position", "Center");
            }
          }*/
        }
        telemetry.update();
      }
      tfodRoverRuckus.deactivate();
    }

    vuforiaRoverRuckus.close();
    tfodRoverRuckus.close();
  }
}
