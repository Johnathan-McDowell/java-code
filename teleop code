//teleop  code
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import java.lang.*;

@TeleOp(name="pp", group="Linear Opmode")

public class Mech extends LinearOpMode {
  double ballPosition = BALL_HOME;
double ballSpeed = .1;

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private CRServo ball_servo1= null;
 
    private DcMotor leftDrive = null;
    private DcMotor rightDrive = null;
    private DcMotor leftDriveback = null;
    private DcMotor rightDriveback = null;
    private DcMotor ballMotor = null;
    private DcMotor armMotor = null;
    private DcMotor goalMotor = null;
    private DcMotor grabberMotor = null;
     
     public final static double BALL_HOME = 0.0;
   public final static double BALL_MIN_RANGE = -1.0;
   public final static double BALL_MAX_RANGE = 1.0;

    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();
 leftDrive  = hardwareMap.get(DcMotor.class, "leftMotor");
        rightDrive = hardwareMap.get(DcMotor.class, "rightMotor");
        leftDriveback  = hardwareMap.get(DcMotor.class, "leftMotorback");
        rightDriveback = hardwareMap.get(DcMotor.class, "rightMotorback");
        ball_servo1 = hardwareMap.get(CRServo.class,"ball_servo1");
        ballMotor = hardwareMap.get(DcMotor.class, "ballMotor");
        armMotor = hardwareMap.get(DcMotor.class, "armMotor");
        goalMotor = hardwareMap.get(DcMotor.class, "goalMotor");
        grabberMotor = hardwareMap.get(DcMotor.class, "grabberMotor");
         
         leftDrive.setDirection(DcMotor.Direction.FORWARD);
        rightDrive.setDirection(DcMotor.Direction.REVERSE);
        leftDriveback.setDirection(DcMotor.Direction.FORWARD);
        rightDriveback.setDirection(DcMotor.Direction.REVERSE);
        
        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        runtime.reset();

        
        while (opModeIsActive()) 
        {
           double ch1;
           double ch3;
           double ch4;
           boolean armPowerup;
         boolean armPowerdown;
           double grabberPowerup;
            
            armPowerup = gamepad1.right_bumper;
             armPowerdown = gamepad1.left_bumper;
           grabberPowerup=gamepad2.left_stick_y;
           ch1=-gamepad1.right_stick_x;
            ch4=gamepad1.left_stick_y;
            ch3=-gamepad1.left_stick_x;
       

 rightDrive.setPower(ch3 + ch1 + ch4);
              rightDriveback.setPower(ch3 + ch1 - ch4);
             leftDrive.setPower(ch3-ch1 - ch4);
              leftDriveback.setPower(ch3 - ch1 +ch4);


if (gamepad1.dpad_down)
{
    leftDrive.setPower(1);
           rightDrive.setPower(1);
           leftDriveback.setPower(-1);
           rightDriveback.setPower(-1); 
}

if (gamepad1.dpad_up)
{
    leftDrive.setPower(-1);
           rightDrive.setPower(-1);
           leftDriveback.setPower(1);
           rightDriveback.setPower(1); 
}
if(gamepad1.dpad_right)
{
     
           leftDrive.setPower(1);
           rightDrive.setPower(-1);
           leftDriveback.setPower(1);
           rightDriveback.setPower(-1);
}
if(gamepad1.dpad_left)
{
     
           leftDrive.setPower(-1);
           rightDriveback.setPower(1);
           leftDriveback.setPower(-1);
           rightDriveback.setPower(1);
}

   
    if(gamepad2.a)
            {
                ballPosition += ballSpeed;
            }
            else if (gamepad2.y)
            {
                ballPosition -= ballSpeed;
            }
              else if (gamepad2.x)
            {
                ballPosition = 0.0;
            }
            ballPosition= Range.clip(ballPosition,BALL_MIN_RANGE,BALL_MAX_RANGE );
            ball_servo1.setPower(ballPosition);
           
            
          
    if (armPowerup == true )
     {
         armMotor.setPower(1);
     } 
     else if (armPowerdown == true )
     {
         armMotor.setPower(-1);
     } 
     else if (armPowerup || armPowerdown != true)
    {
        armMotor.setPower(0);
        
    }
if (gamepad2.dpad_up)
{
   grabberMotor.setPower(1);
}
else if (gamepad2.dpad_down )
{
    grabberMotor.setPower(-1);
}
    
 else if (gamepad2.dpad_up ||gamepad2.dpad_down!= true  )
 {
     grabberMotor.setPower(0);
     
 }  


    goalMotor.setPower(gamepad2.right_stick_y);



ballMotor.setPower(grabberPowerup );

            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Motors", "left (%.2f), right (%.2f)");
            telemetry.update();
        }
    }
}
